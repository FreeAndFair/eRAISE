/**
 * 
 */
package core.guihandlers;

import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


import org.eclipse.core.commands.AbstractHandler;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.swt.custom.BusyIndicator;
import org.eclipse.ui.IEditorInput;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.part.FileEditorInput;

import core.Console;
import core.FileHandler;
import core.SMLTranslator;



/**
 * @author Marieta V. Fasie
 * 	marietafasie at gmail dot com
 *
 */
public class SMLTranslateActiveFile extends AbstractHandler {

	// Get UISynchronize injected as field
	//@Inject UISynchronize sync;
	
	private static Scanner scanner;

	/* (non-Javadoc)
	 * @see org.eclipse.core.commands.IHandler#execute(org.eclipse.core.commands.ExecutionEvent)
	 */
	@Override
	public Object execute(ExecutionEvent event) throws ExecutionException {
		//Get the editor
		
		IEditorPart editorPart = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
		
		IEditorInput input = null;
		
		try{
			input = editorPart.getEditorInput();
		}catch(Exception e){
			//System.out.println("Error when trying to get file from editor");
			return null;
		}
	
		if (input instanceof FileEditorInput) {
		    final IFile ifile = ((FileEditorInput) input).getFile();
		    //clear console
		    Console.getInstance().clear();
		    
		    //call the type checker if ifile is a file
			if(ifile != null){
				BusyIndicator.showWhile(null, new Runnable() {

					@Override
					public void run() {
						translateandprint(ifile);
					}
				});
			}
		}
				
		return null;
	}
	
	/**
	 * 
	 * @param ifile
	 * @return true if the SML files were successfully created
	 */
	public static boolean translateandprint(IFile ifile) {
		
		SMLTranslator sml = new SMLTranslator();
		//delete all markers of a file before type check
		FileHandler.clearMarkers(ifile);
		
		//Translate RSL file to SML
		String message = sml.translate(ifile);
		
		Console.getInstance().print("SML translate finished");
		//get the names of the newly created sml files
		Pattern SML_INFO_PATTERN = Pattern.compile("SML output is in files(\\s*)(.*sml)(\\s+)(.*)(\\s+)(.*sml)");
		
		scanner = new Scanner(message);
		
		while (scanner.hasNextLine()) {
		  String line = scanner.nextLine();
		  // process the line
		  Matcher matcher = SML_INFO_PATTERN.matcher(line); 
		
		  //if the SML translation was correct
		  if (matcher.matches()) {
			  Console.getInstance().print(" SML translation was correct ");
			  String smlFileName1, smlFileName2;
			
			  smlFileName1 = matcher.group(2); //ex.sml
			  smlFileName2 = matcher.group(6); //ex_.sml
			  
		    
			  Console.getInstance().print(" Two files created "+ smlFileName1+" "+smlFileName2);
			
			  String smlProjectName = ifile.getProject().getName()+"SML";
			  IProject smlProject = ResourcesPlugin.getWorkspace().getRoot().getProject(smlProjectName);
		    
			  Console.getInstance().print(" moving sml file in project: "+smlProject.getName());
			  FileHandler.move(ifile.getProject(),smlProject, smlFileName1, smlFileName2, ifile.getProjectRelativePath().removeLastSegments(1));
		    
		    
			  Console console = Console.getInstance();
			  console.print(message);
		    
			Console.getInstance().print(" SML tranlsateandprint returns true");
		    return true;
		  } 
		}
		
		
		return false;
	}

}

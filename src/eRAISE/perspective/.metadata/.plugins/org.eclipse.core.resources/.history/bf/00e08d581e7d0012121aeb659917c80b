/**
 * 
 */
package rslperspective;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Scanner;

import org.eclipse.core.commands.AbstractHandler;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.jface.dialogs.MessageDialog;

/**
 * @author Marieta V. Fasie
 * 	marietafasie at gmail dot com
 *
 */
public class TypeCheckAllHandler extends AbstractHandler{

	@Override
	public Object execute(ExecutionEvent event) throws ExecutionException {
		String infomessage = "";
		Process process=null;
		
		URL res = this.getClass().getResource("/resources/rsltc.exe");
		
		Scanner scanner=null;
		try {
			scanner = new Scanner(res.openStream(), "UTF-8").useDelimiter("\\A");
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		String out = scanner.next();
		
		
		System.out.println("Path: "+ out);
		
		String str = res.getFile();
		//String[] commands ={"D:\\JunoPDE\\TestingTypeChecker\\rsltc.exe","D:\\JunoPDE\\TestingTypeChecker\\SET_DATABASE.rsl"};
		String[] commands ={"D:\\eRAISE\\src\\eRAISE\\perspective\\rslperspective\\resources\\rsltc.exe",
				"D:\\eRAISE\\src\\eRAISE\\perspective\\rslperspective\\resources\\SET_DATABASE.rsl"};
		//String[] commands={"notepad"};
		//String[] commands={"java","-version"};
	
		ProcessBuilder builder = new ProcessBuilder(commands);
		builder.redirectErrorStream(true);
		//builder.directory(new File("D:\\JunoPDE\\TestingTypeChecker\\"));
		infomessage+=System.getProperty("user.dir")+"\n";
		try {
			//starts the program
			process = builder.start();
		
			//get the input stream
			InputStream is = process.getInputStream();
			InputStreamReader isr = new InputStreamReader(is);
			BufferedReader br = new BufferedReader(isr);
			
			//read the program output line by line
			String line = br.readLine();
			
			infomessage+= "Output is: \n";			
			while (line != null && ! line.trim().equals("--EOF--")) {
		        infomessage += line;
		        line = br.readLine();
		    }
		
		} catch (IOException e) {
			infomessage+=e.getMessage();
			e.printStackTrace();
		}
		
		//wait to see if program exited successfully or not
		try {
            int exitValue = process.waitFor();
            infomessage +="\nExit Value is: " + exitValue;
            
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
		
		//display the result in a info view
		MessageDialog.openInformation(null, "Info", infomessage);
		return null;
	}

}

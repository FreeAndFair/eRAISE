/**
 * 
 */
package core.guihandlers;


import org.eclipse.core.commands.AbstractHandler;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.core.runtime.jobs.Job;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.PlatformUI;

import core.Console;



/**
 * @author Marieta V. Fasie
 * 	marietafasie at gmail dot com
 *
 */
public class SMLHandler extends AbstractHandler {


	/* (non-Javadoc)
	 * @see org.eclipse.core.commands.IHandler#execute(org.eclipse.core.commands.ExecutionEvent)
	 */
	@Override
	public Object execute(ExecutionEvent event) throws ExecutionException {
		//clear console
	    Console.getInstance().clear();
		
		Job job = new Job("test"){
			@Override
			protected IStatus run(IProgressMonitor monitor) {
				// Long running
		
		
		IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
	    if (window != null)
	    {
	    	//get the selections in the Project explorer
	        IStructuredSelection selection = (IStructuredSelection) window.getSelectionService().getSelection("org.eclipse.ui.navigator.ProjectExplorer");
	        Object[] selectedElements = selection.toArray();
	        
	        //go through each open selected project 
	        for(int index = 0; index < selectedElements.length; index++){
	        	
	        	Object element = selectedElements[index];
	        	//if (element instanceof IAdaptable && element instanceof IProject){
	        		//IProject selectedProject = (IProject)((IAdaptable)element).getAdapter(IProject.class);
	        		//if(selectedProject.isOpen()){
	        			
	        			//System.out.println(selectedProject.getFullPath());	        		
	        			//this.executeObject(selectedProject);
	        		//}
	        	//}
	        	this.translateObject(element);
	        }
	    }
		 monitor.done();
         return Status.OK_STATUS;
			}
		};
		job.setUser(true);
		job.schedule();
	    
		return null;
	}

	public void translateObject(Object element) {
		IResource[] members;
		
		try {
			if(element instanceof IProject ){ //if it is a project go deeper
				if(((IProject)element).isOpen()){ //and it is open
					System.out.println(((IProject)element).getFullPath());
					members =((IProject) element).members();
					for(int index = 0; index < members.length; index++)
						this.translateObject( members[index] );
				}
			}
			else 
				if(element instanceof IFolder){ //if it is a folder go deeper
					members = ((IFolder) element).members();
					for(int index = 0; index < members.length; index++)
						this.translateObject( members[index] );
				}
				else					
					if(element instanceof IFile){//if it is a file
						IFile ifile = (IFile) element;
						if(ifile.getFileExtension().equals("rsl")){
							System.out.println("   "+ifile.getFullPath());
							
							//call the one that handles single type check
							SMLTranslateActiveFile.translateandprint(ifile);
						}
					}
					else //only projects, folders and rsl files are of interest
						return;
		
		} catch (CoreException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

}

/**
 * 
 */
package core;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.Map;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.FileLocator;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import org.eclipse.core.runtime.Platform;
import org.osgi.framework.Bundle;



/**
 * @author Marieta V. Fasie
 * 	marietafasie at gmail dot com
 *
 */
public class TypeChecker {

	private static PluginLog log = PluginLog.getInstance();
	
	/**
	 * Type checks an RSL file
	 * 
	 * @param context an RSL file
	 */
	public void typeCheck(IFile ifile){
		
		log.debug("Enter typeCheck method");
		
		
		String infomessage = "";
		Process process = null;
		
		log.debug("Current platform: "+System.getProperty("os.name"));
		
		//path of the file opened in the editor
		IPath ipath = ifile.getLocation();
		String filePath = ipath.toString();
		ProcessBuilder builder = null;
		
		String os = System.getProperty("os.name");
		
		String programPath = System.getProperty("rsltc");
		
		if( programPath == null){
			Activator.getDefault().setBinariesPath();
			programPath = System.getProperty("rsltc");
		}
		
		
		
		if( os.indexOf("win") >= 0 || os.indexOf("Win")>=0){
			
			/*
			 * to execute a DOS command from a Java program, you need to prepend
			 * the Windows command shell cmd /c to the command
			 * you want to execute. In other words the type checker
			 * needs to be wrapped in the cmd.
			 * The '/c' switch terminates the command shell after the command completes
			 */

			log.debug("System: "+System.getProperty("os.name"));
		 
			//String resPath = findPluginResource("rsl.core", "resources/win/raise/rsltc.exe");
				
			log.debug("Building program: cmd /c \n    "+ programPath+" \n   "+filePath);
			builder = new ProcessBuilder("cmd", "/C", programPath, filePath);
				
			
			Map<String, String> env = builder.environment();
			
			//String pathVal = findPluginResource("rsl.core", "resources/sml");
			
			if (! env.containsKey("Path")) {
				log.debug("Adding env variable: "+programPath);
		    	env.put("Path", programPath);	    	
		    }
			else{
				String path = env.get("Path");
				if(!path.contains(programPath)){
					log.debug("Adding env variable: "+";"+programPath);
					path = path.concat(";"+programPath);
					env.put("Path", path);
				}
			}
			
			/*
			if (! env.containsKey("Path")) {
		    	//System.out.println("Path is NULL");
		    	env.put("Path", pathVal+"\\bin\\");	    	
		    }
			else{
				String path = env.get("Path");
				if(!path.contains(pathVal+"\\bin\\")){
					path = path.concat(";"+pathVal+"\\bin\\");
					env.put("Path", path);
				}
			}
			
			if (! env.containsKey("SMLNJ_PATH")) {
				//System.out.println("SMLNJ_PATH is NULL");
				env.put("SMLNJ_HOME", pathVal);
			    	
			}
			
			String rslPathVal = findPluginResource("rsl.core", "resources/raise/sml");
		    if (! env.containsKey("RSLML_PATH")) {
		    	//System.out.println("RSLML_PATH is NULL");
		    	env.put("RSLML_HOME", rslPathVal);
		    	
		    }
			*/
			//correlate the error messages with the output messages
			builder.redirectErrorStream(true);
		}
		
		else{
			
			if(os.indexOf("nix") >= 0 || os.indexOf("nux") >= 0 || os.indexOf("aix") > 0 ){
				//linux							
				
				//give rights
				//String programPath = findPluginResource("rsl.core","resources/linux/raise/rsltc");
				log.debug("rsltc path: "+programPath);
				
				ProcessBuilder giveRights = new ProcessBuilder("chmod", "777",programPath);
				log.debug("Rights given");
				try {
					giveRights.start();
				} catch (IOException e) {
					log.error(e.getMessage(), e);
				}
				
				//String commands[] = {programPath, filePath};
					
				builder = new ProcessBuilder(programPath, filePath);
			}
		}
		
		//correlate the error messages with the output messages
		builder.redirectErrorStream(true);
				
		try {
			//start the program
			log.debug("Process started...");
			process = builder.start();
		
			//get the input stream
			InputStream is = process.getInputStream();
			InputStreamReader isr = new InputStreamReader(is);
			BufferedReader br = new BufferedReader(isr);
			
			//read the program output line by line
			String line = br.readLine();
						
			while (line != null && ! line.trim().equals("--EOF--")) {
		        infomessage += line+"\n";
		        line = br.readLine();
		    }
		
			log.debug("Program finished\n");
		
		} catch (IOException e) {
			log.error(e.getMessage(),e);
		}
		
		Console.getInstance().print(infomessage);
		
	}
	
	/**
	 * This method takes a relative path of a file and
	 * returns the absolute path of the file according
	 * to the runtime workspace
	   * @param pluginName  The name of the plugin
	   * @param path  The path (as a String) of the file within the plugin
	   * @return The absolute file system location of the target file
	   * 
	   */
	  public String findPluginResource(final String pluginName, 
	                                          final String path){
		  log.debug("---Enter findPLuginresource");
	    // This is the 'official' way to find something that
	    // is in the install location of the plugin, cf.
	    // Official Eclipse Faq #103.
	    // It is stated that this code will only work if the 
	    // install location is on the local file system.
	    final Bundle bundle = Platform.getBundle(pluginName);
	    
	    log.debug("getting bundle");
	    IPath p = new Path(path);
	    final URL url = FileLocator.find(bundle, p, null);
	    log.debug("getting url: "+url);
	    // The substring call is to remove an initial /
	    // FIXME do we remove the / on all platforms?
	    // FIXME - do we need to do these back-and-forth conversions of will this do:
	    // return Platform.resolve(url).getPath().substring(1);
	    URL resolvedURL=null;
		try {
			resolvedURL = FileLocator.resolve(url);
			log.debug("Resolved url: "+resolvedURL);
			
		} catch (IOException e) {
			log.error(e.getMessage(), e);
		}
	    
		final String filePath = resolvedURL.getPath();	    
	    log.debug("Resolved filePath: "+filePath);
	    
	    final Path resourcePath = new Path(filePath);
	    
	    p = resourcePath.makeAbsolute();
	    String s = p.toOSString();
	    log.debug("ResourcePath: "+p);
	    
	    if(s.startsWith("file:/") || s.startsWith("file:\\"))
	    	s = s.substring(6);
	   
	    log.debug("----Returning "+s);
	    return s;
	  }
	
}
